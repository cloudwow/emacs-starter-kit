;; Object ecb-2.32/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "ecb-2.32/"
  :tables (list 
   (semanticdb-table "ecb-file-browser.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("ecb-util" include nil nil [1273 1292]) ("tree-buffer" include nil nil [1293 1315]) ("ecb-mode-line" include nil nil [1316 1340]) ("ecb-navigate" include nil nil [1341 1364]) ("ecb-face" include nil nil [1365 1384]) ("ecb-speedbar" include nil nil [1385 1408]) ("ecb-layout" include nil nil [1409 1430]) ("ecb-common-browser" include nil nil [1431 1460]) ("assoc" include nil nil [1479 1495]) ("cl" include nil nil [1547 1560]) ("silentcomp" include nil nil [1584 1605]) ("silentcomp-defun" code nil nil [1608 1655]) ("silentcomp-defvar" code nil nil [1656 1693]) ("defgroup" code nil nil [1824 1952]) ("defgroup" code nil nil [1954 2075]) ("defgroup" code nil nil [2077 2197]) ("defgroup" code nil nil [2199 2321]) ("ecb-source-path" variable (:user-visible-flag t) nil [2323 3553]) ("ecb-add-path-for-not-matching-files" variable (:user-visible-flag t :default-value (quote (t))) nil [3555 5029]) ("ecb-source-path-functions" variable nil nil [5032 5326]) ("ecb-display-default-dir-after-start" variable (:user-visible-flag t :default-value t) nil [5329 6249]) ("ecb-show-sources-in-directories-buffer" variable (:user-visible-flag t :default-value (quote ("left7" "left13" "left14" "left15"))) nil [6252 7116]) ("ecb-directories-show-node-info" variable (:user-visible-flag t :default-value (quote (if-too-long . path))) nil [7119 8625]) ("ecb-directories-update-speedbar" variable (:user-visible-flag t :default-value (quote auto)) nil [8627 10882]) ("ecb-show-sources-in-directories-buffer-p" function nil nil [10885 11266]) ("ecb-cache-directory-contents" variable (:user-visible-flag t :default-value (quote (("^/\\([^:/]*@\\)?\\([^@:/]*\\):.*" . 0) (".*" . 50)))) nil [11268 13652]) ("ecb-cache-directory-contents-not" variable (:user-visible-flag t) nil [13655 14830]) ("ecb-ping-program" variable (:default-value "ping") nil [14832 14991]) ("ecb-ping-options" variable (:default-value (if (eq system-type (quote windows-nt)) (list "-n" "1") (list "-c" "1"))) nil [14993 15402]) ("ecb-host-accessible-check-valid-time" variable nil nil [15404 16607]) ("ecb-prescan-directories-for-emptyness" variable (:user-visible-flag t :default-value (quote unless-remote)) nil [16609 18608]) ("ecb-prescan-directories-exclude-regexps" variable (:user-visible-flag t) nil [18610 18992]) ("ecb-directory-should-prescanned-p" function (:arguments ("dir")) nil [18994 19521]) ("ecb-after-directory-change-hook" variable (:user-visible-flag t) nil [19523 20633]) ("ecb-sources-perform-read-only-check" variable (:user-visible-flag t :default-value (quote unless-remote)) nil [20635 21721]) ("ecb-read-only-check-exclude-regexps" variable (:user-visible-flag t) nil [21723 22146]) ("ecb-sources-read-only-check-p" function (:arguments ("dir")) nil [22148 22675]) ("ecb-directories-buffer-name" variable (:user-visible-flag t :default-value " *ECB Directories*") nil [22677 23193]) ("ecb-excluded-directories-regexps" variable (:user-visible-flag t :default-value (quote ("^\\(CVS\\|\\.[^xX]*\\)$"))) nil [23196 23484]) ("ecb-check-dir-exclude" function (:arguments ("dir")) nil [23486 23587]) ("ecb-auto-expand-directory-tree" variable (:user-visible-flag t :default-value (quote best)) nil [23589 24152]) ("ecb-sources-buffer-name" variable (:user-visible-flag t :default-value " *ECB Sources*") nil [24155 24651]) ("ecb-sources-show-node-info" variable (:user-visible-flag t :default-value (quote (if-too-long . name))) nil [24653 25913]) ("ecb-sources-exclude-cvsignore" variable (:user-visible-flag t) nil [25915 26581]) ("ecb-source-file-regexps" variable (:user-visible-flag t :default-value (quote ((".*" ("\\(^\\(\\.\\|#\\)\\|\\(~$\\|\\.\\(elc\\|obj\\|o\\|class\\|lib\\|dll\\|a\\|so\\|cache\\)$\\)\\)") ("^\\.\\(emacs\\|gnus\\)$"))))) nil [26583 29857]) ("ecb-show-source-file-extension" variable (:user-visible-flag t :default-value t) nil [29860 29989]) ("ecb-sources-sort-method" variable (:user-visible-flag t :default-value (quote name)) nil [29991 30588]) ("ecb-sources-sort-ignore-case" variable (:user-visible-flag t :default-value t) nil [30590 30776]) ("ecb-history-buffer-name" variable (:user-visible-flag t :default-value " *ECB History*") nil [30778 31274]) ("ecb-history-exclude-file-regexps" variable (:user-visible-flag t :default-value (quote ("TAGS$" "semantic\\.cache$"))) nil [31276 31644]) ("ecb-check-filename-for-history-exclude" function (:arguments ("filename")) nil [31646 31774]) ("ecb-history-show-node-info" variable (:user-visible-flag t :default-value (quote (always . path))) nil [31776 32803]) ("ecb-history-sort-method" variable (:user-visible-flag t :default-value (quote name)) nil [32805 33428]) ("ecb-history-sort-ignore-case" variable (:user-visible-flag t :default-value t) nil [33430 33597]) ("ecb-kill-buffer-clears-history" variable (:user-visible-flag t) nil [33599 34287]) ("ecb-history-item-name" variable (:user-visible-flag t :default-value (quote buffer-name)) nil [34290 34579]) ("ecb-directories-menu-user-extension" variable (:user-visible-flag t :default-value (quote (("Version Control" (ecb-dir-popup-cvs-status "CVS Status") (ecb-dir-popup-cvs-examine "CVS Examine") (ecb-dir-popup-cvs-update "CVS Update"))))) nil [34581 36927]) ("ecb-directories-menu-user-extension-function" variable (:user-visible-flag t :default-value (quote ignore)) nil [36929 37686]) ("ecb-sources-menu-user-extension" variable (:user-visible-flag t :default-value (quote (("Version control" (ecb-file-popup-ediff-revision "Ediff against revision") ("---") (ecb-file-popup-vc-next-action "Check In/Out") (ecb-file-popup-vc-log "Revision history") (ecb-file-popup-vc-annotate "Annotate") (ecb-file-popup-vc-diff "Diff against last version") ("---") (ecb-file-popup-vc-refresh-file "Recompute state for file") (ecb-file-popup-vc-refresh-dir "Recompute state for whole dir"))))) nil [37688 38717]) ("ecb-sources-menu-user-extension-function" variable (:user-visible-flag t :default-value (quote ignore)) nil [38719 39444]) ("ecb-history-menu-user-extension" variable (:user-visible-flag t :default-value (quote (("Version control" (ecb-file-popup-ediff-revision "Ediff against revision") ("---") (ecb-file-popup-vc-next-action "Check In/Out") (ecb-file-popup-vc-log "Revision history") (ecb-file-popup-vc-annotate "Annotate") (ecb-file-popup-vc-diff "Diff against last version") ("---") (ecb-file-popup-vc-refresh-file "Recompute state for file") (ecb-file-popup-vc-refresh-all-files "Recompute state for whole history"))))) nil [39446 40489]) ("ecb-history-menu-user-extension-function" variable (:user-visible-flag t :default-value (quote ignore)) nil [40491 41216]) ("ecb-directories-menu-sorter" variable (:user-visible-flag t) nil [41218 42170]) ("ecb-sources-menu-sorter" variable (:user-visible-flag t) nil [42173 42894]) ("ecb-history-menu-sorter" variable (:user-visible-flag t) nil [42897 43618]) ("ecb-directories-buffer-after-create-hook" variable (:user-visible-flag t) nil [43621 44158]) ("ecb-sources-buffer-after-create-hook" variable (:user-visible-flag t) nil [44161 44592]) ("ecb-history-buffer-after-create-hook" variable (:user-visible-flag t) nil [44595 45026]) ("ecb-vc-enable-support" variable (:user-visible-flag t :default-value (quote unless-remote)) nil [45028 46421]) ("ecb-vc-directory-exclude-regexps" variable (:user-visible-flag t) nil [46423 46813]) ("ecb-vc-xemacs-exclude-remote-cvs-repository" variable (:user-visible-flag t :default-value (if ecb-running-xemacs t nil)) nil [46815 47735]) ("ecb-vc-directory-should-be-checked-p" function (:arguments ("dir")) nil [47737 48220]) ("ecb-vc-state-mapping" variable (:user-visible-flag t :default-value (quote ((up-to-date . up-to-date) (edited . edited) (locally-modified . edited) (needs-patch . needs-patch) (needs-checkout . needs-patch) (needs-merge . needs-merge) (unlocked-changes . unlocked-changes) (added . added) (locally-added . added) (ignored . ignored) (unknown . unknown)))) nil [48222 53043]) ("ecb-vc-supported-backends" variable (:user-visible-flag t :default-value (delq nil (if ecb-running-xemacs (\` ((ecb-vc-dir-managed-by-CVS . vc-cvs-status))) (\` ((ecb-vc-dir-managed-by-CVS . ecb-vc-state) (ecb-vc-dir-managed-by-RCS . ecb-vc-state) (ecb-vc-dir-managed-by-SCCS . ecb-vc-state) (ecb-vc-dir-managed-by-SVN . ecb-vc-state)))))) nil [53045 56455]) ("ecb-directories-nodetype-directory" variable (:constant-flag t) nil [56956 57003]) ("ecb-directories-nodetype-sourcefile" variable (:constant-flag t :default-value 1) nil [57004 57052]) ("ecb-directories-nodetype-sourcepath" variable (:constant-flag t :default-value 2) nil [57053 57101]) ("ecb-sources-nodetype-sourcefile" variable (:constant-flag t) nil [57102 57146]) ("ecb-history-nodetype-sourcefile" variable (:constant-flag t) nil [57147 57191]) ("ecb-path-selected-directory" variable nil nil [57194 57276]) ("ecb-path-selected-source" variable nil nil [57278 57354]) ("ecb-files-and-subdirs-cache-add" function (:arguments ("dir" "cached-value")) nil [57402 57625]) ("ecb-files-and-subdirs-cache-get" function (:arguments ("dir")) nil [57627 57816]) ("ecb-files-and-subdirs-cache-remove" function (:arguments ("dir")) nil [57818 57971]) ("ecb-files-and-subdirs-cache-clear" function nil nil [57973 58135]) ("ecb-files-and-subdirs-cache-dump" function (:user-visible-flag t :arguments ("&optional" "no-nil-value")) nil [58137 58555]) ("ecb-directory-empty-cache-add" function (:arguments ("dir" "cached-value")) nil [58599 58820]) ("ecb-directory-empty-cache-get" function (:arguments ("dir")) nil [58822 58990]) ("ecb-directory-empty-cache-remove" function (:arguments ("dir")) nil [58992 59149]) ("ecb-directory-empty-cache-remove-all" function (:arguments ("dir")) nil [59151 60090]) ("ecb-directory-empty-cache-clear" function nil nil [60092 60240]) ("ecb-directory-empty-cache-dump" function (:user-visible-flag t :arguments ("&optional" "no-nil-value")) nil [60242 60595]) ("ecb-sources-cache-remove" function (:arguments ("dir")) nil [60634 60787]) ("ecb-sources-cache-add-full" function (:arguments ("dir" "cache-elem-full")) nil [60789 61377]) ("ecb-sources-cache-add-filtered" function (:arguments ("dir" "cache-elem-filtered")) nil [61379 62003]) ("ecb-sources-cache-get-full" function (:arguments ("dir")) nil [62005 62325]) ("ecb-sources-cache-get-filtered" function (:arguments ("dir")) nil [62327 62670]) ("ecb-sources-cache-clear" function nil nil [62672 62804]) ("ecb-sources-cache-dump" function (:user-visible-flag t :arguments ("&optional" "no-nil-value")) nil [62806 63110]) ("ecb-vc-cache-add-file" function (:arguments ("file" "state" "checked-buffer-names")) nil [63143 63434]) ("ecb-vc-cache-add-dir" function (:arguments ("dir" "backend")) nil [63436 63553]) ("ecb-vc-cache-get" function (:arguments ("file")) nil [63555 63644]) ("ecb-vc-cache-remove" function (:arguments ("file")) nil [63646 63775]) ("ecb-vc-cache-remove-files-of-dir" function (:arguments ("dir")) nil [63777 64887]) ("ecb-vc-cache-clear" function nil nil [64890 65007]) ("ecb-vc-cache-dump" function (:user-visible-flag t :arguments ("&optional" "no-nil-value")) nil [65009 65298]) ("ecb-remote-path-cache-add" function (:arguments ("path" "remote-path")) nil [65340 65567]) ("ecb-remote-path-cache-get" function (:arguments ("path")) nil [65569 65741]) ("ecb-remote-path-cache-dump" function (:user-visible-flag t :arguments ("&optional" "no-nil-value")) nil [65743 66059]) ("ecb-host-accessible-cache-add" function (:arguments ("host" "accessible-p")) nil [66105 66374]) ("ecb-host-accessible-cache-get" function (:arguments ("host" "valid-time")) nil [66376 66914]) ("ecb-host-accessible-cache-dump" function (:user-visible-flag t :arguments ("&optional" "no-nil-value")) nil [66916 67244]) ("ecb-file-browser-initialize-caches" function nil nil [67317 67473]) ("ecb-file-browser-initialize" function (:arguments ("&optional" "no-caches")) nil [67475 67815]) ("ecb-goto-window-directories" function (:user-visible-flag t) nil [67819 68184]) ("ecb-goto-window-sources" function (:user-visible-flag t) nil [68186 68545]) ("ecb-goto-window-history" function (:user-visible-flag t) nil [68547 68697]) ("ecb-maximize-window-directories" function (:user-visible-flag t) nil [68699 69159]) ("ecb-maximize-window-sources" function (:user-visible-flag t) nil [69161 69608]) ("ecb-maximize-window-history" function (:user-visible-flag t) nil [69610 69951]) ("defecb-window-dedicator" code nil nil [69953 71040]) ("defecb-window-dedicator" code nil nil [71042 72091]) ("defecb-window-dedicator" code nil nil [72094 72287]) ("ecb-expand-directory-tree" function (:arguments ("path" "node")) nil [72290 73476]) ("ecb-check-directory-for-caching" function (:arguments ("dir" "number-of-contents")) nil [73479 74388]) ("ecb-check-directory-for-source-regexps" function (:arguments ("dir")) nil [74391 74656]) ("ecb-files-from-cvsignore" function (:arguments ("dir")) nil [74659 75210]) ("ecb-check-directory-for-cvsignore-exclude" function (:arguments ("dir")) nil [75213 75407]) ("ecb-get-sources-sort-function" function (:arguments ("sort-method" "&optional" "ignore-case")) nil [75409 76186]) ("ecb-get-files-and-subdirs" function (:arguments ("dir")) nil [76189 78366]) ("ecb-update-sources-buffer" function (:arguments ("dir-before-update")) nil [78369 81245]) ("ecb-sources-filter-by-ext" function (:arguments ("ext-str")) nil [81247 81589]) ("tree-buffer-defpopup-command" code nil nil [81591 81895]) ("ecb-sources-filter-by-regexp" function nil nil [81897 82149]) ("tree-buffer-defpopup-command" code nil nil [82153 82294]) ("tree-buffer-defpopup-command" code nil nil [82298 82450]) ("ecb-sources-filter" function (:user-visible-flag t) nil [82455 83592]) ("ecb-sources-filter-modeline-prefix" function (:arguments ("buffer-name" "sel-dir" "sel-source")) nil [83594 84065]) ("ecb-apply-filter-to-sources-buffer" function (:arguments ("filter-regexp" "&optional" "filter-display")) nil [84067 86899]) ("ecb-matching-source-paths" function (:arguments ("path-to-match" "&optional" "sorted")) nil [86901 88142]) ("ecb-get-best-matching-source-path" function (:arguments ("path")) nil [88144 88286]) ("ecb-set-selected-directory" function (:arguments ("path" "&optional" "force")) nil [88288 93582]) ("ecb-get-source-name" function (:arguments ("filename")) nil [93585 93803]) ("ecb-select-source-file" function (:arguments ("filename" "&optional" "force")) nil [93806 94820]) ("ecb-history-filter" variable nil nil [94823 95161]) ("ecb-reset-history-filter" function nil nil [95163 95314]) ("ecb-history-filter-reset-p" function nil nil [95316 95387]) ("ecb-reset-history-filter" code nil nil [95389 95415]) ("ecb-add-all-buffers-to-history" function (:user-visible-flag t) nil [95417 95854]) ("ecb-add-buffers-to-history" function nil nil [95856 96866]) ("ecb-history-filter-modeline-prefix" function (:arguments ("buffer-name" "sel-dir" "sel-source")) nil [96871 97228]) ("ecb-add-item-to-history-buffer" function (:arguments ("filename")) nil [97231 98575]) ("ecb-sort-history-buffer" function nil nil [98578 102426]) ("ecb-update-history-window" function (:arguments ("&optional" "filename")) nil [102429 102680]) ("ecb-set-selected-source" function (:arguments ("filename" "other-edit-window" "no-edit-buffer-selection" "hide")) nil [102682 104201]) ("ecb-clear-history" function (:user-visible-flag t) nil [104217 104560]) ("ecb-update-directory-node" function (:arguments ("node")) nil [104564 105765]) ("ecb-get-source-paths-from-functions" function nil nil [105768 106189]) ("ecb-update-directories-buffer" function (:user-visible-flag t) nil [106192 108074]) ("ecb-host-accessible-valid-time" function (:arguments ("host")) nil [108099 108439]) ("ecb-host-accessible-p" function (:arguments ("host")) nil [108500 109155]) ("silentcomp-defun" code nil nil [109208 109244]) ("silentcomp-defun" code nil nil [109245 109276]) ("silentcomp-defun" code nil nil [109277 109314]) ("silentcomp-defun" code nil nil [109315 109354]) ("silentcomp-defun" code nil nil [109355 109399]) ("silentcomp-defun" code nil nil [109400 109439]) ("silentcomp-defun" code nil nil [109440 109482]) ("ecb-remote-path" function (:arguments ("path")) nil [109483 111806]) ("ecb-check-emptyness-of-dir" function (:arguments ("dir")) nil [111903 113179]) ("defecb-stealthy" code nil nil [113182 115656]) ("ecb-stealthy-read-only-check--internal" function (:arguments ("state")) nil [115679 118350]) ("defecb-stealthy" code nil nil [118353 118832]) ("defecb-stealthy" code nil nil [118834 119208]) ("ecb-vc-state-icon-alist" variable (:constant-flag t :default-value (quote ((up-to-date "vc-up-to-date" "(u)") (edited "vc-edited" "(e)") (added "vc-added" "(a)") (needs-patch "vc-needs-patch" "(p)") (needs-merge "vc-needs-merge" "(m)") (ignored "vc-ignored" "(x)") (unknown "vc-unknown" "(?)") (nil "vc-unknown" "(?)")))) nil [120086 121033]) ("ecb-vc-get-image-name-for-vc-state" function (:arguments ("state")) nil [121035 121226]) ("ecb-vc-get-ascii-icon-for-vc-state" function (:arguments ("state")) nil [121230 121415]) ("ecb-vc-incr-searchpattern-node-prefix" variable (:constant-flag t :default-value (quote ("\\(\\(([uempx?])\\)? \\)?" . 2))) nil [121418 121779]) ("ecb-vc-check-state" function (:arguments ("file" "tree-buffer-name" "vc-state-fcn")) nil [121782 125875]) ("ecb-vc-update-sources-cache" function (:arguments ("dir")) nil [125877 127523]) ("ecb-vc-cvs-root-remote-p" function (:arguments ("root")) nil [127525 127803]) ("ecb-vc-dir-managed-by-CVS" function (:arguments ("directory")) nil [128756 131894]) ("ecb-vc-dir-managed-by-RCS" function (:arguments ("directory")) nil [131897 132069]) ("ecb-vc-dir-managed-by-SVN" function (:arguments ("directory")) nil [132071 132277]) ("ecb-vc-dir-managed-by-SCCS" function (:arguments ("directory")) nil [132279 132636]) ("silentcomp-defun" code nil nil [132783 132829]) ("ecb-vc-dir-managed-by-CC" function (:arguments ("directory")) nil [132830 133053]) ("silentcomp-defun" code nil nil [133055 133103]) ("ecb-vc-check-CC-state" function (:arguments ("file")) nil [133104 133699]) ("clearcase-sync-from-disk" function (:arguments ("after" "ecb")) nil [133701 134134]) ("ecb-vc-state" function (:arguments ("file")) nil [134136 134405]) ("ecb-vc-get-state-fcn-for-dir" function (:arguments ("directory")) nil [134407 135625]) ("defalias" code nil nil [135627 135689]) ("ecb-vc-generate-node-name" function (:arguments ("name" "state")) nil [135691 136995]) ("ecb-stealthy-vc-check--dir/history" function (:arguments ("state")) nil [137063 140241]) ("ecb-stealthy-vc-check--sources" function (:arguments ("state")) nil [140243 144077]) ("defecb-stealthy" code nil nil [144079 144466]) ("defecb-stealthy" code nil nil [144469 144861]) ("defecb-stealthy" code nil nil [144863 145364]) ("ecb-vc-reset-vc-stealthy-checks" function nil nil [145366 146708]) ("ecb-vc-advices" variable (:default-value (quote ((vc-checkin . after) (clearcase-sync-from-disk . after)))) nil [147783 147994]) ("ecb-checkedin-file" variable nil nil [147996 148369]) ("vc-checkin" function (:arguments ("after" "ecb")) nil [148371 148590]) ("ecb-vc-checkin-hook" function nil nil [148592 148919]) ("ecb-vc-after-revert-hook" function nil nil [148921 149250]) ("ecb-vc-enable-internals" function (:arguments ("arg")) nil [149252 149859]) ("ecb-stealth-tasks-after-directories-update" function nil nil [150041 150443]) ("ecb-stealth-tasks-after-sources-update" function nil nil [150445 150764]) ("ecb-stealth-tasks-after-history-update" function nil nil [150766 151010]) ("ecb-tree-node-add-files" function (:arguments ("node" "path" "files" "type" "include-extension" "old-children" "&optional" "not-expandable")) nil [151054 152664]) ("ecb-new-child" function (:arguments ("old-children" "name" "type" "data" "&optional" "not-expandable" "shrink-name")) nil [152666 153379]) ("ecb-add-source-path" function (:user-visible-flag t :arguments ("&optional" "dir" "alias" "no-prompt-for-future-session")) nil [153381 154486]) ("tree-buffer-defpopup-command" code nil nil [154488 154630]) ("tree-buffer-defpopup-command" code nil nil [154633 154772]) ("ecb-delete-s" function (:arguments ("child" "children" "sources")) nil [154775 154965]) ("tree-buffer-defpopup-command" code nil nil [154968 155589]) ("ecb-remove-dir-from-caches" function (:arguments ("dir")) nil [155592 155811]) ("ecb-directory-update-speedbar" function (:arguments ("dir")) nil [155813 156623]) ("ecb-directory-clicked" function (:arguments ("node" "ecb-button" "edit-window-nr" "shift-mode" "meta-mode")) nil [156625 159753]) ("ecb-source-file-clicked" function (:arguments ("node" "ecb-button" "edit-window-nr" "shift-mode" "meta-mode")) nil [159755 160692]) ("ecb-source-clicked" function (:arguments ("node" "ecb-button" "edit-window-nr" "shift-mode" "meta-mode")) nil [160694 161155]) ("ecb-history-clicked" function (:arguments ("node" "ecb-button" "edit-window-nr" "shift-mode" "meta-mode")) nil [161157 161620]) ("ecb-expand-directory-nodes" function (:user-visible-flag t :arguments ("level")) nil [161622 162177]) ("ecb-get-file-info-text" function (:arguments ("file")) nil [162180 162665]) ("ecb-mouse-over-directory-node" function (:arguments ("node" "&optional" "window" "no-message" "click-force")) nil [162668 164149]) ("ecb-mouse-over-source-node" function (:arguments ("node" "&optional" "window" "no-message" "click-force")) nil [164152 165070]) ("ecb-mouse-over-history-node" function (:arguments ("node" "&optional" "window" "no-message" "click-force")) nil [165073 165967]) ("tree-buffer-defpopup-command" code nil nil [165997 166971]) ("ecb-grep-directory-internal" function (:arguments ("node" "find")) nil [166974 167789]) ("tree-buffer-defpopup-command" code nil nil [167792 167927]) ("tree-buffer-defpopup-command" code nil nil [167930 168057]) ("ecb-create-directory" function (:arguments ("parent-node")) nil [168060 168297]) ("tree-buffer-defpopup-command" code nil nil [168300 168623]) ("ecb-dired-directory-internal" function (:arguments ("node" "&optional" "other")) nil [168626 169093]) ("tree-buffer-defpopup-command" code nil nil [169096 169218]) ("tree-buffer-defpopup-command" code nil nil [169221 169383]) ("ecb-dir-run-cvs-op" function (:arguments ("node" "op" "op-arg-list")) nil [169386 169506]) ("tree-buffer-defpopup-command" code nil nil [169509 169672]) ("tree-buffer-defpopup-command" code nil nil [169675 169837]) ("tree-buffer-defpopup-command" code nil nil [169840 169999]) ("ecb-common-directories-menu" variable nil nil [170002 170042]) ("setq" code nil nil [170045 170573]) ("ecb-directories-menu" variable nil nil [170576 170720]) ("setq" code nil nil [170721 170943]) ("ecb-directories-menu-title-creator" variable (:default-value (function (lambda (node) (let ((node-type (tree-node->type node)) (node-data (tree-node->name node))) (cond ((= node-type ecb-directories-nodetype-directory) (format "%s  (Directory)" node-data)) ((= node-type ecb-directories-nodetype-sourcefile) (format "%s  (File)" node-data)) ((= node-type ecb-directories-nodetype-sourcepath) (format "%s  (Source-path)" node-data))))))) nil [170946 171700]) ("tree-buffer-defpopup-command" code nil nil [171702 171941]) ("tree-buffer-defpopup-command" code nil nil [171942 172089]) ("tree-buffer-defpopup-command" code nil nil [172090 172237]) ("tree-buffer-defpopup-command" code nil nil [172238 172385]) ("tree-buffer-defpopup-command" code nil nil [172386 172533]) ("tree-buffer-defpopup-command" code nil nil [172534 172681]) ("tree-buffer-defpopup-command" code nil nil [172682 172829]) ("tree-buffer-defpopup-command" code nil nil [172830 172977]) ("ecb-dir/source/hist-menu-editwin-entries" function nil nil [172979 173682]) ("ecb-directories-menu-creator" function (:arguments ("tree-buffer-name" "node")) nil [173685 175130]) ("ecb-source-path-menu" variable nil nil [175155 175290]) ("setq" code nil nil [175291 175507]) ("tree-buffer-defpopup-command" code nil nil [175510 175976]) ("tree-buffer-defpopup-command" code nil nil [175979 176150]) ("tree-buffer-defpopup-command" code nil nil [176153 176321]) ("tree-buffer-defpopup-command" code nil nil [176324 176492]) ("tree-buffer-defpopup-command" code nil nil [176495 176653]) ("tree-buffer-defpopup-command" code nil nil [176655 176837]) ("tree-buffer-defpopup-command" code nil nil [176839 177051]) ("tree-buffer-defpopup-command" code nil nil [177053 177337]) ("ecb-sources-menu" variable nil nil [177339 177410]) ("setq" code nil nil [177412 178106]) ("ecb-sources-menu-title-creator" variable (:default-value (function (lambda (node) (ecb-file-name-nondirectory (tree-node->data node))))) nil [178109 178326]) ("ecb-sources-menu-creator" function (:arguments ("tree-buffer-name" "node")) nil [178328 179100]) ("tree-buffer-defpopup-command" code nil nil [179121 179332]) ("ecb-history-filter-by-ext" function (:arguments ("ext-str")) nil [179334 179929]) ("tree-buffer-defpopup-command" code nil nil [179931 180294]) ("ecb-history-filter-by-regexp" function nil nil [180296 180714]) ("tree-buffer-defpopup-command" code nil nil [180716 180861]) ("tree-buffer-defpopup-command" code nil nil [180865 181042]) ("tree-buffer-defpopup-command" code nil nil [181046 181506]) ("ecb-history-filter" function (:user-visible-flag t) nil [181508 182391]) ("ecb-history-menu" variable nil nil [182393 182464]) ("setq" code nil nil [182467 183259]) ("ecb-history-menu-title-creator" variable (:default-value (function (lambda (node) (tree-node->name node)))) nil [183262 183450]) ("ecb-history-menu-creator" function (:arguments ("tree-buffer-name" "node")) nil [183452 184195]) ("defecb-tree-buffer-creator" code nil nil [184225 187507]) ("defecb-tree-buffer-creator" code nil nil [187509 190107]) ("defecb-tree-buffer-creator" code nil nil [190109 192383]) ("silentcomp-provide" code nil nil [192386 192424]))
    :file "ecb-file-browser.el"
    :pointmax 192460
    )
   )
  :file "semantic.cache"
  :semantic-tag-version "2.0pre4"
  :semanticdb-version "2.0pre4"
  )
